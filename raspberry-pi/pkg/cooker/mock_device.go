// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/device/device.go

// Package cooker is a generated GoMock package.
package cooker

import (
	gomock "github.com/golang/mock/gomock"
	response "github.com/niku29niku/digit-hackathon2018/raspberry-pi/pkg/response"
	reflect "reflect"
)

// MockDevice is a mock of Device interface
type MockDevice struct {
	ctrl     *gomock.Controller
	recorder *MockDeviceMockRecorder
}

// MockDeviceMockRecorder is the mock recorder for MockDevice
type MockDeviceMockRecorder struct {
	mock *MockDevice
}

// NewMockDevice creates a new mock instance
func NewMockDevice(ctrl *gomock.Controller) *MockDevice {
	mock := &MockDevice{ctrl: ctrl}
	mock.recorder = &MockDeviceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDevice) EXPECT() *MockDeviceMockRecorder {
	return m.recorder
}

// SetTemperature mocks base method
func (m *MockDevice) SetTemperature(value float64) (response.Status, error) {
	ret := m.ctrl.Call(m, "SetTemperature", value)
	ret0, _ := ret[0].(response.Status)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetTemperature indicates an expected call of SetTemperature
func (mr *MockDeviceMockRecorder) SetTemperature(value interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTemperature", reflect.TypeOf((*MockDevice)(nil).SetTemperature), value)
}

// SetDuration mocks base method
func (m *MockDevice) SetDuration(value int) (response.Status, error) {
	ret := m.ctrl.Call(m, "SetDuration", value)
	ret0, _ := ret[0].(response.Status)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetDuration indicates an expected call of SetDuration
func (mr *MockDeviceMockRecorder) SetDuration(value interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDuration", reflect.TypeOf((*MockDevice)(nil).SetDuration), value)
}

// IsReady mocks base method
func (m *MockDevice) IsReady() (response.Status, error) {
	ret := m.ctrl.Call(m, "IsReady")
	ret0, _ := ret[0].(response.Status)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsReady indicates an expected call of IsReady
func (mr *MockDeviceMockRecorder) IsReady() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsReady", reflect.TypeOf((*MockDevice)(nil).IsReady))
}

// Start mocks base method
func (m *MockDevice) Start() (response.Status, error) {
	ret := m.ctrl.Call(m, "Start")
	ret0, _ := ret[0].(response.Status)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Start indicates an expected call of Start
func (mr *MockDeviceMockRecorder) Start() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockDevice)(nil).Start))
}
