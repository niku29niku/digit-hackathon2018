// Code generated by MockGen. DO NOT EDIT.
// Source: vendor/github.com/goburrow/serial/serial.go

// Package device is a generated GoMock package.
package device

import (
	reflect "reflect"

	serial "github.com/goburrow/serial"
	gomock "github.com/golang/mock/gomock"
)

// MockPort is a mock of Port interface
type MockPort struct {
	ctrl     *gomock.Controller
	recorder *MockPortMockRecorder
}

// MockPortMockRecorder is the mock recorder for MockPort
type MockPortMockRecorder struct {
	mock *MockPort
}

// NewMockPort creates a new mock instance
func NewMockPort(ctrl *gomock.Controller) *MockPort {
	mock := &MockPort{ctrl: ctrl}
	mock.recorder = &MockPortMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPort) EXPECT() *MockPortMockRecorder {
	return m.recorder
}

// Read mocks base method
func (m *MockPort) Read(p []byte) (int, error) {
	ret := m.ctrl.Call(m, "Read", p)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read
func (mr *MockPortMockRecorder) Read(p interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockPort)(nil).Read), p)
}

// Write mocks base method
func (m *MockPort) Write(p []byte) (int, error) {
	ret := m.ctrl.Call(m, "Write", p)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Write indicates an expected call of Write
func (mr *MockPortMockRecorder) Write(p interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockPort)(nil).Write), p)
}

// Close mocks base method
func (m *MockPort) Close() error {
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockPortMockRecorder) Close() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockPort)(nil).Close))
}

// Open mocks base method
func (m *MockPort) Open(arg0 *serial.Config) error {
	ret := m.ctrl.Call(m, "Open", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Open indicates an expected call of Open
func (mr *MockPortMockRecorder) Open(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Open", reflect.TypeOf((*MockPort)(nil).Open), arg0)
}
